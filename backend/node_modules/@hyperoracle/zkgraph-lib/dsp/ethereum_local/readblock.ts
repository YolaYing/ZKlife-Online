import { Bytes } from "../../common/type";
import {
  read_private_bytes_from_u64,
  read_private_len_then_bytes,
  wasm_private_input,
  read_private_array_of_len_then_bytes,
} from "../../common/zkwasm";

import { packMatchedEvents } from "../ethereum/packevents";
import { Account, Block, Event, Slot } from "../ethereum/type"

export function readBlocks(): Array<Block> {
  const blockCount: i32 = wasm_private_input() as i32;

  let blocks = new Array<Block>(0);
  for (let i = 0; i < blockCount; i++){
      let rlpHeader = read_private_len_then_bytes()
      let block = new Block(rlpHeader);

      let accountCount: i32 = wasm_private_input() as i32;
      for (let j = 0; j < accountCount; j++){
          let address = read_private_bytes_from_u64(20);
          let rlpNode = read_private_len_then_bytes();
          let accountProof = read_private_array_of_len_then_bytes();
          let account = new Account(address, rlpNode, accountProof);

          let slotCount: i32 = wasm_private_input() as i32;
          for (let k = 0; k < slotCount; k++){
              let key = read_private_bytes_from_u64(32);
              let value = read_private_len_then_bytes();
              let storageProof = read_private_array_of_len_then_bytes();

              account.slots.push(new Slot(key, value, storageProof))
          }

          block.accounts.push(account)
      }

      // Reading rlp(receipt)s. 
      let receiptscount: i32 = wasm_private_input() as i32;
      if (receiptscount > 0) {
        let rawreceipts: Bytes = read_private_len_then_bytes();
        
        /**
         * The only difference to main_eth -> readBlocks
         */
        // read matched events offsets
        let _offsets = read_private_len_then_bytes();
        let matched_event_offset = changetype<Uint32Array>(_offsets);

        // Pack match offsets to Event[]
        let events: Event[] = packMatchedEvents(
          rawreceipts.dataStart,
          matched_event_offset.length / 7,
          matched_event_offset.dataStart,
        );
        /**
         * Difference end
         */
          
        // Add Events to block
        block.setEvents(events)
      }

      blocks.push(block);
  }

  return blocks;
}

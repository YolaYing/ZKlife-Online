import { readdir, stat } from "fs/promises";
// import { join } from 'path';
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import { readFile } from "fs/promises";
import fs from "fs";
const scriptDir = join(dirname(fileURLToPath(import.meta.url)), "../../");
async function readJsFile(filePath) {
  const absolutePath = join(scriptDir, filePath);
  const fileContents = await readFile(absolutePath, "utf-8");
  return fileContents;
}

async function traverseDirectory(dir, excludeDirList, onFileAsyncFunc) {
  const files = await readdir(dir);

  for (const file of files) {
    const filePath = join(dir, file);
    const fileStat = await stat(filePath);

    if (!excludeDirList.includes(filePath)) {
      if (fileStat.isDirectory()) {
        await traverseDirectory(filePath, excludeDirList, onFileAsyncFunc); // Recursively traverse subdirectories
      } else {
        await onFileAsyncFunc(filePath);
        //   console.log('Visiting File:', filePath);
      }
    }
  }
}

const prefixPath = "node_modules/@hyperoracle/zkgraph-lib/";

var weblibjson = {};
async function toJson(filePath) {
  let fileContent = await readJsFile(filePath);
  weblibjson[prefixPath + filePath] = fileContent;
}

// const startDirectory = 'test/t1'; // Replace with your starting directory
const startDirectory = "."; // Replace with your starting directory
const excludeDirList = [
  "test",
  "node_modules",
  ".git",
  ".github",
  ".gitignore",
  "README.md",
  "tsconfig.json",
  "package-lock.json",
  "package.json",
  ".prettierignore",
  ".prettierrc.json",
  ".DS_Store",
  "build",
  "dsp/ethereum_local",
];
await traverseDirectory(startDirectory, excludeDirList, toJson).catch(
  console.error,
);

console.log(Object.keys(weblibjson));

const jsonContent = JSON.stringify(weblibjson, null, 2); // 2 spaces for indentation
const outfilePath = "test/weblib/weblib.json"; // Replace with your desired file path
fs.writeFileSync(outfilePath, jsonContent, "utf-8");
console.log("dumped to", outfilePath);

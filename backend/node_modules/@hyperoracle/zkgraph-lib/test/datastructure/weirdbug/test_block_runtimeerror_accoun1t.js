import { Mock as mock, WasmBenchmark as bm, Compiler } from "zkwasm-toolchain"
import { Input } from "zkwasm-toolchain";

let addr = '0xa60ecf32309539dd84f27a9563754dca818b0001';
// let esig = Bytes.fromHexString('0x1012');
// let key = Bytes.fromHexString('0x5678');


function prepareInputs(){

    let input = new Input()
    input.addInt(1, false)
    input.addVarLenHexString('0xaaaaaa', false) // header rlp
    input.addInt(1, false)
    input.addHexString(addr, false) // address
    input.addVarLenHexString('0xaaaaaa', false) // account rlp
    input.addVarLenHexString('0xaaaaaa', false) // account proof
    input.addInt(1, false)
    input.addHexString('0x0000000000000000000000000000000000000000000000000000000000000008', false)
    input.addHexString('0x1111111111222222222222223333333333333333444444444444444444444444', false)
    input.addVarLenHexString('0x3333333344444444444444444111111111122222222222222333333334444444', false)
    
    input.addVarLenHexString('0x1111111111222222222222223333333333333333444444444444444444444444', true)
    input.addHexString('0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', true)
    return input
}

async function runOne(entryFile, wasmPath, watPath){
    try{
        Compiler.compile(entryFile, wasmPath, 'common/type/abort', watPath, null)
    } catch (error) {
        process.exit(1);
    }
    let input = prepareInputs();
    console.log('Mock Result:', await mock.dryrunWithPath(wasmPath, input.getPrivateInputStr(), input.getPublicInputStr()))
    let loc = bm.watLocByPath(watPath)
    let size = bm.wasmSizeByPath(wasmPath)
    console.log('Loc:', loc, 'lines')
    console.log('Size:', size, 'bytes')
}

await runOne('test/datastructure/weirdbug/block_runtimeerror_accoun1t.ts', 'build/block_runtimeerror_accoun1t.wasm', 'build/block_runtimeerror_accoun1t.wat')
// await runOne('test/datastructure/block_bytes.ts', 'build/block_bytes.wasm', 'build/block_bytes.wat')
// await runOne('test/datastructure/block_string.ts', 'build/block_string.wasm', 'build/block_string.wat')
// await runOne('test/datastructure/event.ts', 'build/event.wasm', 'build/event.wat')

// console.log('Public Input:', input.getPublicInputStr())
// console.log('Private Input:', input.getPrivateInputStr())